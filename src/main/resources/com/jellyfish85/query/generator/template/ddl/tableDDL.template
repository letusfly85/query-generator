<%
import com.jellyfish85.dbaccessor.bean.erd.mainte.tool.MsIndColumnsBean
import com.jellyfish85.dbaccessor.bean.erd.mainte.tool.MsIndexesBean
import com.jellyfish85.dbaccessor.bean.erd.mainte.tool.MsTablesBean
import com.jellyfish85.dbaccessor.bean.erd.mainte.tool.MsTabColumnsBean
import com.jellyfish85.dbaccessor.dao.erd.mainte.tool.MsIndColumnsDao
import com.jellyfish85.dbaccessor.dao.erd.mainte.tool.MsIndexesDao
import com.jellyfish85.dbaccessor.dao.erd.mainte.tool.MsTabColumnsDao
%>\
/******************************************************************************
 Program Name: DDL for  ${schemaName}.${tableName}
 Author:       Database Architect
 ******************************************************************************/
column log_date new_value log_date_text noprint
column username new_value user_name_text noprint
column instancename new_value instance_name_text noprint
select to_char(sysdate,'yyyy_mmdd_hh24mi') log_date from dual;
select username username from user_users;
select instance_name instancename from v\$instance;
spool on;
spool log/Create_Table_${tableName}_${schemaName}.&log_date_text..log
CREATE TABLE ${schemaName}.${tableName} ( <% columnList.eachWithIndex {bean, idx ->
    def attr = ""
    if(bean.dataTypeAttr().value() == "NUMBER") {
        attr = bean.physicalColumnNameAttr().value() + "\t" + bean.dataTypeAttr().value() + "(" + bean.dataLengthAttr().value() + "," + bean.dataPrecisionAttr().value() + ")"
    } else if(bean.dataTypeAttr().value() == "TIMESTAMP(6)") {
        attr = bean.physicalColumnNameAttr().value() + "\t" + bean.dataTypeAttr().value()
    } else if(bean.dataTypeAttr().value() == "CLOB" || bean.dataTypeAttr().value() == "BLOB" || bean.dataTypeAttr().value() == "LONG" || bean.dataTypeAttr().value() == "DATE") {
        attr = bean.physicalColumnNameAttr().value() + "\t" + bean.dataTypeAttr().value()
    } else {
        attr = bean.physicalColumnNameAttr().value() + "\t" + bean.dataTypeAttr().value() + "(" + bean.dataLengthAttr().value() + ")"
    }
    if (bean.dataDefaultAttr().value() != null && bean.dataDefaultAttr().value() != "NONE") {
        attr += "\tDEFAULT " +  ("'" + bean.dataDefaultAttr().value().replaceAll(" ","") + "'").replaceAll("''","'")
    }
    if (bean.nullableAttr().value() == "N") {
        attr += "\tNOT NULL"
    }
    if (idx == 0){ %>
         ${attr}<% } else { %>
        ,${attr}<% } }%>
);
/

COMMENT ON TABLE ${schemaName}.${tableName} IS '${uniqueTag}\t${tableBean.logicalTableNameAttr().value()}'
/

<% if (!pkList.size().equals(0)) { %>
ALTER TABLE ${schemaName}.${tableName} ADD CONSTRAINT PK_${tableName} PRIMARY KEY (
<% pkList.eachWithIndex {bean, idx ->
if (idx == 0) { %> ${bean.physicalColumnNameAttr().value()}
<% } else { %>,${bean.physicalColumnNameAttr().value()}
<% } } %>)<% } %>
/

<% if (!indHashMap.size().equals(0)) {
indHashMap.each {MsIndexesBean msIndexesBean, ArrayList<MsIndColumnsBean> indList -> %>
CREATE INDEX ${schemaName}.${msIndexesBean.indexNameAttr().value()} ON ${schemaName}.${tableName} KEY (
<% indList.eachWithIndex {MsIndColumnsBean indCol, index ->
if (index.equals(0)) { %>     ${indCol.columnNameAttr().value()}
<% } else { %>    ,${indCol.columnNameAttr().value()}
<% } } %>)
/
<% } } %>

<% columnList.eachWithIndex {bean, idx -> %>
COMMENT ON TABLE ${schemaName}.${tableName}.${bean.physicalColumnNameAttr().value()}    IS	'${bean.logicalColumnNameAttr().value()}'
/ <% } %>

ALTER TABLE ${schemaName}.${tableName} NOLOGGING
/